#!/bin/bash
cd /tmp/rom # Depends on where source got synced
mv /tmp/ci/extras.sh /tmp/rom
. /tmp/ci/function && check_build_type

# Normal build steps
. build/envsetup.sh
lunch $lunch_device
source extras.sh
case "$build_type" in
		 R|r)
		 export _JAVA_OPTIONS="-Xmx10g"
esac
export CCACHE_DIR=/tmp/ccache
export CCACHE_EXEC=$(which ccache)
export USE_CCACHE=1
ccache -M 15G
ccache -o compression=true
ccache -z

# check how much time sync took
sync_time

# compile plox
case "$build_type" in
		 V|v) # Lets Make Vendor / System
		 SECONDS=0
		 make vendorimage -j$(nproc --all)
		 vendor_time=$(($SECONDS / 60))
		 sleeps=$((113 - ($vendor_time + $sync_time)))m
		 make systemimage -j$(nproc --all) | tee build.log &
		 sleep $sleeps
		 kill %1
		 ;;
		 S|s) # Lets Make System
		 sleeps=$((113 - $sync_time))m
		 make systemimage -j$(nproc --all) | tee build.log &
		 sleep $sleeps
		 kill %1
		 ;;
		 R|r) # Lets Make Full Rom
		 bash /tmp/ci/build.sh; ls out/target/product/$device_codename/*$device_codename*.zip || bash /tmp/ci/build.sh
		 if [ ! -e out/target/product/*/*$device_codename*.zip ]; then # to bypass OOM kill
		 bash /tmp/ci/build.sh; ls out/target/product/$device_codename/*$device_codename*.zip || bash /tmp/ci/build.sh # simply re-run the build
		 fi
esac

if [ -e out/target/product/$device_codename/system.img ]; then
echo "R" > /tmp/build_type.txt
else
echo "S" > /tmp/build_type.txt
fi

cd out/target/product/$device_codename/
ls *$device_codename*.zip && upload *$device_codename*.zip

if [ ! -e /tmp/rom/out/target/product/*/*$device_codename*.zip ]; then

# don't send this again if bg loop already done this when it was stuck in sleep
if [ ! -e /tmp/abort.txt ]; then
tg "\`Stopping Compilation! $build_type to collect ccache..\`"
fi

fi

ccache -s # Let's print ccache statistics finally
